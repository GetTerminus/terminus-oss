@import '~@terminus/ui-styles/helpers';

.ts-csv-entry {
  display: inline-block;
  font: var(--ts-typography-compound-body);
  max-width: 100%;

  &.c-csv-entry--full-width {
    display: block;
    width: 100%;

    .c-csv-entry__form {
      overflow: hidden;
    }

    .c-csv-entry__row {
      display: block;
    }

    .c-csv-entry__input {
      width: 100%;
    }
  }
}

// <div> primary container
.c-csv-entry {
  --csv-row-height: 39px;
  --csv-cell-padding: var(--ts-space-inset-300);
  --csv-external-row-height: 35px;
  --csv-right-column-width: 40px;
  --csv-left-column-width: 15px;
  // Odd height used to ensure that the table cuts off mid-cell so the user knows there is more content
  --csv-scroll-maxHeight: 28.5em;
  --csv-input-minWidth: 72px;
  // TODO: Use a standard color once a light blue is added
  --csv-focus-backgroundColor: #d3eaf9;
  --csv-invalid-fontWeight: 400;

  // <div> container for overall table to allow scrolling
  .c-csv-entry__scroll {
    max-height: var(--csv-scroll-maxHeight);
    // To remove a horizontal scrollbar showing in firefox
    overflow-x: -moz-hidden-unscrollable;
    overflow-y: auto;
  }

  // <div> container for table info
  .c-csv-entry__info {
    font: var(--ts-typography-compound-caption);
    line-height: 1.2em;
    margin-bottom: var(--ts-space-stack-200);
    // Match the size of the ts-icon-button
    margin-right: var(--csv-right-column-width);
    text-align: right;
  }

  // <form>
  .c-csv-entry__form {
    border: 1px solid var(--ts-color-utility-300);
    // Allow horizontal scrolling when all columns cannot be displayed
    overflow-x: auto;
  }

  // <div> Container for a row
  .c-csv-entry__row {
    white-space: nowrap;

    &--header,
    &--inner {
      display: flex;
      flex-direction: row;
    }
  }

  // <input> individual cell content
  .c-csv-entry__input {
    @include truncate-overflow;
    border: 1px solid var(--ts-color-utility-300);
    flex: 1 1 auto;
    font-size: inherit;
    min-width: var(--csv-input-minWidth);
    padding: var(--csv-cell-padding);

    // remove double border between columns
    + .c-csv-entry__input {
      border-left-width: 0;
    }

    &:first-of-type {
      border-left: 0;
    }

    &:last-of-type {
      border-right: 0;
    }

    &:focus {
      background-color: var(--csv-focus-backgroundColor);
      outline: none;
    }

    // Class added to header cells
    &--header {
      border-bottom-width: 3px;
      border-top: 0;
    }

    &--invalid {
      color: var(--ts-color-warn-500);
    }
  }

  // <ts-icon-button> button to delete row
  .c-csv-entry__delete {
    max-height: var(--csv-external-row-height);

    .ts-icon-button {
      color: var(--ts-color-utility-300);
    }
  }

  // <div> cell in column of row IDs
  .c-csv-entry__column-id {
    color: var(--ts-color-utility-600);
    font: var(--ts-typography-compound-caption);
    max-height: var(--csv-external-row-height);
    padding: var(--csv-cell-padding);
  }

  // <div> container for all validation messages
  .c-csv-entry__messages {
    // Create margin matching column with 'delete' buttons
    margin-left: var(--csv-left-column-width);
    margin-right: var(--csv-right-column-width);
    padding-top: var(--ts-space-stack-200);

    .ts-button {
      display: inline-block;

      &:not(:last-of-type) {
        margin-right: var(--ts-space-inline-200);
      }
    }

    .c-button {
      white-space: nowrap;
    }
  }

  .c-csv-entry__message {
    color: var(--ts-color-warn-500);
    font: var(--ts-typography-compound-hint);
    line-height: 1.2em;
  }
}

// Remove double border between rows
.c-csv-entry__row {
  &:not(.c-csv-entry__row--header) {
    &:not(:last-child) {
      .c-csv-entry__input {
        border-bottom-width: 0;
      }
    }
  }
}
