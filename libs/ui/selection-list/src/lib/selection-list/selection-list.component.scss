:root {
  --ts-sl-chipCollection-zIndex: 1;
  // This brings chips above the static trigger
  --ts-sl-chip-zIndex: 2;
  --ts-sl-icon-width: 24px;
  --ts-sl-input-width: calc(100% - var(--ts-sl-icon-width));
  --ts-sl-multiple-margin-adustment: -3px;
  --ts-sl-spinner-right: var(--ts-space-inline-600);
  --ts-sl-icon-color: var(--ts-color-utility-600);
  --ts-sl-input-marginBottom: 3px;
  --ts-sl-input-color: var(--ts-color-utility-900);
  --ts-sl-input-minHeight: 25px;
  --ts-sl-backdrop-backgroundColor: transparent;
}

.ts-selection-list {
  cursor: pointer;
  display: block;

  &.ts-selection-list--single {
    .ts-selection-list__input {
      width: var(--ts-sl-input-width);
    }
  }

  // NOTE: When chips are added, they increase the vertical height so we need to counteract that here.
  // We cannot change the outer padding as that will negatively impact the layout when no vales exist.
  &.ts-selection-list--multiple {
    .ts-chip-collection {
      margin-bottom: calc(var(--ts-sl-multiple-margin-adustment) * 2);
      margin-top: var(--ts-sl-multiple-margin-adustment);
    }
  }

  &.ts-selection-list--disabled {
    .ts-selection-list__input {
      cursor: not-allowed;
    }
  }

  .ts-chip-collection-wrapper {
    z-index: var(--ts-sl-chipCollection-zIndex);
  }

  .ts-chip {
    z-index: var(--ts-sl-chip-zIndex);
    .c-chip {
      // Override default vertical alignment when inside selection list
      .c-chip__remove {
        top: 0;
      }
    }
  }

  .ts-icon {
    &.c-selection-list__spinner {
      right: var(--ts-sl-spinner-right);
    }
  }
}

.ts-selection-list__input-wrap {
  position: relative;

  > .ts-icon {
    color: var(--ts-sl-icon-color);
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-60%);
  }
}

// NOTE: Bottom margin and min-height needed to keep vertical alignment consistent when no chips are present.
.ts-selection-list__input {
  background: transparent;
  border: none;
  color: var(--ts-sl-input-color);
  display: inline-block;
  font: inherit;
  margin-bottom: var(--ts-sl-input-marginBottom);
  max-width: 100%;
  min-height: var(--ts-sl-input-minHeight);
  outline: none;
  padding: 0;
  // User agent stylesheets set the text-align of inputs explicitly to "start". Those can be
  // easily overwritten by targeting the input element using a simple CSS selector, but since
  // the text-align will be applied most of the time on the `ts-form-field` to also align the
  // placeholder, the alignment should be inherited here.
  text-align: inherit;
  // Needed to make last line of the textarea line up with the baseline.
  vertical-align: bottom;

  // Undo the red box-shadow glow added by Firefox on invalid inputs.
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid
  &:-moz-ui-invalid {
    box-shadow: none;
  }

  // Style overrides for the input trigger when in single selection mode
  .ts-selection-list--single & {
    --ts-sl-input-marginBottom: 0;
    --ts-sl-input-minHeight: auto;
    padding-top: 0;
  }
}


.cdk-overlay-container {
  .ts-selection-list__backdrop {
    background-color: var(--ts-sl-backdrop-backgroundColor);
  }
}
