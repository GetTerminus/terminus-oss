@import '~@terminus/ui-styles/helpers';

:root {
  --ts-drawer-backgroundColor: var(--ts-color-base-white);
  --ts-drawer-headerFooter-borderColor: var(--ts-color-utility-300);
  --ts-drawer-horizontal-space-from-container: 0;
  --ts-drawer-vertical-space-from-container: 0;
  --ts-drawer-header-space-from-top: 0;
  --ts-drawer-footer-space-from-bottom: 0;
  --ts-drawer-content-zIndex: 1;
  --ts-drawer-drawer-push-zIndex: 2;
  --ts-drawer-backdrop-zIndex: 3;
  --ts-drawer-drawer-over-zIndex: 4;
  --ts-drawer-headerFooter-zIndex: 5;
  --ts-drawer-animation-duration: var(--ts-animation-time-duration-400);
  --ts-drawer-animation-function: var(--ts-animation-easing-ease);
  --ts-drawer-visibility: hidden;
  --ts-drawer-backdrop-backgroundColor: transparent;
}

.ts-drawer-container {
  box-sizing: border-box;
  // Need this to take up space in the layout.
  display: block;
  -webkit-overflow-scrolling: touch;
  // We need a stacking context here so that the backdrop and drawers are clipped to the
  // TsDrawerContainer. This creates a new z-index stack so we use low numbered z-indices.
  // We create another stacking context in the '.ts-drawer-content' and in each drawer so that
  // the application content does not get messed up with our own CSS.
  position: relative;
  // Use a z-index to create a new stacking context. (We can't use transform because it breaks fixed
  // positioning inside of the transformed element).
  z-index: 1;

  // Note that the `NoopAnimationsModule` is being handled inside of the component code.
  &.ng-animate-disabled,
  .ng-animate-disabled & {
    .ts-drawer__backdrop,
    .ts-drawer-content {
      transition: none;
    }
  }
}

.ts-drawer__backdrop {
  @include take-space;
  background-color: var(--ts-drawer-backdrop-backgroundColor);
  display: block;
  // We use 'visibility: hidden | visible' because 'display: none' will not animate any
  // transitions, while visibility will interpolate transitions properly.
  visibility: var(--ts-drawer-visibility);
  z-index: var(--ts-drawer-backdrop-zIndex);

  &.ts-drawer__backdrop--visible {
    --ts-drawer-visibility: visible;
  }
}

.ts-drawer-content {
  display: block;
  height: 100%;
  overflow: auto;
  position: relative;
  z-index: var(--ts-drawer-content-zIndex);

  .ts-drawer-transition & {
    transition: {
      duration: var(--ts-drawer-animation-duration);
      property: transform, margin-left, margin-right;
      timing-function: var(--ts-drawer-animation-function);
    }
  }
}

.ts-drawer__inner-container {
  flex: 1 0 0;
  overflow-y: scroll;
}

.ts-drawer {
  @include elevation-element(menu);
  background-color: var(--ts-drawer-backgroundColor);
  bottom: var(--ts-drawer-vertical-space-from-container);
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  position: absolute;
  top: var(--ts-drawer-vertical-space-from-container);
  z-index: var(--ts-drawer-backdrop-zIndex);

  &.ts-drawer--push {
    z-index: var(--ts-drawer-drawer-push-zIndex);
  }

  &.ts-drawer--start {
    right: var(--ts-drawer-horizontal-space-from-container);
  }

  &.ts-drawer--end {
    right: var(--ts-drawer-horizontal-space-from-container);
  }

  .ts-drawer-header {
    border-bottom: 1px solid var(--ts-drawer-headerFooter-borderColor);
    display: block;
    max-width: inherit;
    overflow-wrap: break-word;
    top: var(--ts-drawer-header-space-from-top);
    width: inherit;
    z-index: var(--ts-drawer-headerFooter-zIndex);
  }

  .ts-drawer-footer {
    border-top: 1px solid var(--ts-drawer-headerFooter-borderColor);
    bottom: var(--ts-drawer-footer-space-from-bottom);
    max-width: inherit;
    overflow-wrap: break-word;
    width: inherit;
    z-index: var(--ts-drawer-headerFooter-zIndex);
  }
}


