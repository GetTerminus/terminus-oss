@mixin cdk-a11y {
  .cdk-visually-hidden {
    $smallest-adjustment: 1px;

    -webkit-appearance: none;
    -moz-appearance: none;
    border: 0;
    clip: rect(0 0 0 0);
    height: $smallest-adjustment;
    margin: -$smallest-adjustment;
    outline: 0;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: $smallest-adjustment;
  }
}

@mixin cdk-high-contrast($target: active) {
  @media screen and (-ms-high-contrast: $target) {
    @content;
  }
}

$g-easing: cubic-bezier(0.26, 0.86, 0.44, 0.985) !default;

$g-material-background-easing: cubic-bezier(0.25, 0.8, 0.25, 1) !default;

$g-material-shadow-easing: cubic-bezier(0.4, 0, 0.2, 1) !default;

:root {
  --swift-ease-out-duration: var(--ts-animation-time-duration-400);
  --swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
  --swift-ease-in-duration: var(--ts-animation-time-duration-300);
  --swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2);
}

$g-animation-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;
$g-elevation-transition-duration: 280ms !default;

$g-tab-animation-duration: 200ms !default;
$g-tab-ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;

$breakpoints: "layout-xs", "layout-gt-xs", "layout-sm", "layout-gt-sm", "layout-mat", "layout-gt-mat", "layout-lg", "layout-gt-lg", "layout-xl";

@mixin bp($point) {
  @if index($breakpoints, $point) {
    @if $point == "layout-xs" {
      @media (max-width: 599px) {
        @content;
      }
    }

    @if $point == "layout-gt-xs" {
      @media (min-width: 600px) {
        @content;
      }
    }

    @if $point == "layout-sm" {
      @media (min-width: 600px) and (max-width: 959px) {
        @content;
      }
    }

    @if $point == "layout-gt-sm" {
      @media (min-width: 960px) {
        @content;
      }
    }

    @if $point == "layout-mat" {
      @media (min-width: 960px) and (max-width: 1279px) {
        @content;
      }
    }

    @if $point == "layout-gt-mat" {
      @media (min-width: 1280px) {
        @content;
      }
    }

    @if $point == "layout-lg" {
      @media (min-width: 1280px) and (max-width: 1919px) {
        @content;
      }
    }

    @if $point == "layout-gt-lg" {
      @media (min-width: 1920px) {
        @content;
      }
    }

    @if $point == "layout-xl" {
      @media (min-width: 1920px) {
        @content;
      }
    }
  }
  @else {
    @error "There is no breakpoint `#{$point}` in this list; choose one of: #{$breakpoints}";
  }
}

$g-cursors: alias, auto, col-resize, copy, default, help, move, not-allowed, ns-resize, pointer, text;

@function cursor($type: auto) {
  $index: index($g-cursors, $type);

  @if $index == null {
    @error 'Invalid cursor type name: `#{$type}`. Allowed types: "#{$g-cursors}"';
  }

  @return nth($g-cursors, $index);
}

@mixin cursor($type) {
  cursor: cursor($type);
}

@mixin button-base {
  background-color: transparent;
  border: 0;
  cursor: cursor(pointer);
  outline: 0;
  text-align: center;

  &:focus {
    outline: 0;
  }
}

$type__family--base: #{Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif} !default;

$type__family--monospaced: #{"Lucida Console", Monaco, "DejaVu Sans Mono", monospace} !default;

$typography-typefaces: ("primary": $type__family--base, "monospaced": $type__family--monospaced);

$type__size--base: 16px !default;

$type__weight--base: 400 !default;

$typography-formats: "display", "headline", "title", "subhead", "body", "caption", "fixedwidth", "hint";

$typography-display-levels: 1, 2, 3, 4;

$typography-body-levels: 1, 2;

@mixin typography($format: "body", $level: 1, $typeface: "primary") {
  @if index($typography-formats, $format) == null {
    @error "Invalid typography format: `#{$format}`. Allowed formats: #{$typography-formats}";
  }

  @if not map-has-key($typography-typefaces, $typeface) {
    $allowed: map-keys($typography-typefaces);

    @error "Invalid typography typeface: `#{$typeface}`. Allowed typefaces: #{$allowed}";
  }
  @else {
    font-family: map-get($typography-typefaces, $typeface);
  }

  @if $format == "display" {
    @if index($typography-display-levels, $level) == null {
      @error "Invalid display format level: `#{$level}`. Allowed levels: #{$typography-display-levels}";
    }

    @if $level == 1 {
      font-size: 34px;
      font-weight: 500;
      line-height: 40px;
    }

    @if $level == 2 {
      font-size: 45px;
      font-weight: 500;
      line-height: 64px;
    }

    @if $level == 3 {
      font-size: 56px;
      font-weight: 500;
      letter-spacing: -.005em;
      line-height: 56px;
    }

    @if $level == 4 {
      font-size: 112px;
      font-weight: 400;
      letter-spacing: -.01em;
      line-height: 112px;
    }
  }

  @if $format == "headline" {
    font-size: 24px;
    font-weight: 500;
    line-height: 32px;
  }

  @if $format == "title" {
    font-size: 20px;
    font-weight: 500;
    letter-spacing: .005em;
  }

  @if $format == "subhead" {
    font-size: 18px;
    font-weight: 500;
    letter-spacing: .01em;
    line-height: 24px;
  }

  @if $format == "body" {
    font-size: 16px;
    letter-spacing: .01em;

    @if index($typography-body-levels, $level) == null {
      @error "Invalid body format level: `#{$level}`. Allowed levels: #{$typography-body-levels}";
    }

    @if $level == 1 {
      font-weight: 400;

      &:not(.c-button) {
        &:not(.c-input) {
          &:not(.c-select) {
            &:not(.ts-checkbox) {
              line-height: 20px;
            }
          }
        }
      }
    }

    @if $level == 2 {
      font-weight: 500;
    }
  }

  @if $format == "caption" {
    font-size: 12px;
    letter-spacing: .02em;
  }

  @if $format == "fixedwidth" {
    font-family: $type__family--monospaced;
  }

  @if $format == "hint" {
    color: color(utility);
    font-size: 75%;
    font-weight: 400;
    letter-spacing: .01em;
    line-height: 1.5;
  }
}

@mixin truncate-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

$g-spacing: 16px !default;

$g-spacings: (small: (2: floor($g-spacing / 4), 1: floor($g-spacing / 2), 0: floor($g-spacing - 4)), default: (0: $g-spacing), large: (0: ceil($g-spacing / 2 * 3), 1: ceil($g-spacing / 2 * 4), 2: ceil($g-spacing / 2 * 5), 3: ceil($g-spacing / 2 * 6), 4: ceil($g-spacing / 2 * 7), 5: ceil($g-spacing / 2 * 9), 6: ceil($g-spacing / 2 * 12)));

@function spacing($type: default, $size: 0) {
  @if not map-has-key($g-spacings, $type) {
    $allowed-types: map-keys($g-spacings);

    @error "Invalid spacing type name: `#{$type}`. Allowed type: #{$allowed-types}";
  }

  @if not map-has-key(map-get($g-spacings, $type), $size) {
    $allowed-sizes: map-keys(map-get($g-spacings, $type));

    @error "Invalid size: `#{$size}`. Allowed sizes for `#{$type}` are: #{$allowed-sizes}";
  }

  @return map-get(map-get($g-spacings, $type), $size);
}

$key-umbra: rgba(0, 0, 0, 0.2);
$key-penumbra: rgba(0, 0, 0, 0.14);
$ambient: rgba(0, 0, 0, 0.12);

$reference-shadows: (elevation: 0, shadows: ((0, 0, 0, 0, $key-umbra), (0, 0, 0, 0, $key-penumbra), (0, 0, 0, 0, $ambient))), (elevation: 2, shadows: ((0, 3, 1, -2, $key-umbra), (0, 2, 2, 0, $key-penumbra), (0, 1, 5, 0, $ambient))), (elevation: 3, shadows: ((0, 3, 3, -2, $key-umbra), (0, 3, 4, 0, $key-penumbra), (0, 1, 8, 0, $ambient))), (elevation: 4, shadows: ((0, 2, 4, -1, $key-umbra), (0, 4, 5, 0, $key-penumbra), (0, 1, 10, 0, $ambient))), (elevation: 6, shadows: ((0, 3, 5, -1, $key-umbra), (0, 6, 10, 0, $key-penumbra), (0, 1, 18, 0, $ambient))), (elevation: 8, shadows: ((0, 5, 5, -3, $key-umbra), (0, 8, 10, 1, $key-penumbra), (0, 3, 14, 2, $ambient))), (elevation: 16, shadows: ((0, 8, 10, -5, $key-umbra), (0, 16, 24, 2, $key-penumbra), (0, 6, 30, 5, $ambient)));

$min-animation-length: 250ms;
$max-animation-length: 400ms;

$material-elements: (dialog: 24, picker: 24, nav-drawer: 16, right-drawer: 16, bottom-sheet: 16, fab: 6 12 active, sub-menu-3: 11, sub-menu-2: 10, sub-menu-1: 9, menu: 8, bottom-nav-bar: 8, card: 2 8 hover, raised-button: 2 8 active, snackbar: 6, app-bar: 4, refresh-indicator: 3, quick-entry: 2 3 active, search-bar: 2 3 active, switch: 1);

@function find-bounding-shadow-sets($elevation) {
  @if $elevation < 0 {
    @error "find-bounding-shadow-sets: Elevation is less than zero";
  }

  $lower: nth($reference-shadows, length($reference-shadows) - 1);
  $upper: nth($reference-shadows, length($reference-shadows));

  @for $i from 1 to length($reference-shadows) {
    $inner-lower: nth($reference-shadows, $i);
    $inner-upper: nth($reference-shadows, $i + 1);

    @if map-get($inner-lower, "elevation") <= $elevation and map-get($inner-upper, "elevation") > $elevation {
      @return $inner-lower, $inner-upper;
    }
  }

  @return $lower, $upper;
}

@function lerp($x, $a, $b) {
  @return $a + $x * ($b - $a);
}

@function lerp-shadow($x, $shadow1, $shadow2) {
  $new-x: round(lerp($x, nth($shadow1, 1), nth($shadow2, 1)));
  $new-y: round(lerp($x, nth($shadow1, 2), nth($shadow2, 2)));
  $new-blur: round(lerp($x, nth($shadow1, 3), nth($shadow2, 3)));
  $new-spread: round(lerp($x, nth($shadow1, 4), nth($shadow2, 4)));
  $new-color: nth($shadow1, 5);

  @return #{$new-x + px} #{$new-y + px} #{$new-blur + px} #{$new-spread + px} $new-color;
}

@function calculate-shadow-set-at-depth($elevation) {
  $bounds: find-bounding-shadow-sets($elevation);
  $min: nth($bounds, 1);
  $max: nth($bounds, 2);
  $x: ($elevation - map-get($min, "elevation")) / (map-get($max, "elevation") - map-get($min, "elevation"));
  $elevation-shadows: ();

  @for $i from 1 to length(map-get($min, "shadows")) + 1 {
    $new-shadow: lerp-shadow($x, nth(map-get($min, "shadows"), $i), nth(map-get($max, "shadows"), $i));
    $elevation-shadows: append($elevation-shadows, $new-shadow, comma);
  }

  @return $elevation-shadows;
}

@mixin elevation-transition($elevation-change: 6, $easing: cubic-bezier(0.4, 0, 0.2, 1)) {
  $duration: lerp($elevation-change / 24, $min-animation-length, $max-animation-length);

  transition: box-shadow $duration $easing;
}

@mixin elevation($elevation1, $elevation2: null, $state: null) {
  @if $elevation1 == 0 {
    box-shadow: none !important;
  }
  @else {
    box-shadow: calculate-shadow-set-at-depth($elevation1);
  }

  @if $elevation2 != null {
    @include elevation-transition($elevation2 - $elevation2);

    &:#{$state} {
      @if $elevation1 == 0 {
        box-shadow: none !important;
      }
      @else {
        box-shadow: calculate-shadow-set-at-depth($elevation2);
      }
    }
  }
}

@mixin elevation-element($element-name) {
  $attr: map-get($material-elements, $element-name);

  @if length($attr) == 1 {
    @include elevation(nth($attr, 1));
  }
  @else {
    @include elevation(nth($attr, 1), nth($attr, 2), nth($attr, 3));
  }
}

$g-cursors: alias, auto, col-resize, copy, default, help, move, not-allowed, ns-resize, pointer, text;

@function cursor($type: auto) {
  $index: index($g-cursors, $type);

  @if $index == null {
    @error 'Invalid cursor type name: `#{$type}`. Allowed types: "#{$g-cursors}"';
  }

  @return nth($g-cursors, $index);
}

@mixin cursor($type) {
  cursor: cursor($type);
}

@mixin card($allows-interaction: false) {
  min-height: calc(100% - #{spacing(large) * 2});
  padding: spacing(large);
  vertical-align: top;

  @if $allows-interaction == true {
    @include elevation-element(card);

    cursor: cursor(pointer);
  }
  @else {
    @include elevation(2);
  }

  .c-card__title {
    @include typography(title);
  }
}

$color__pure--dark: #302d35 !default;

$color__pure--light: #fafafa !default;

$color__utility--xdark: #3e3c43 !default;

$color__utility--dark: #757575 !default;

$color__utility: #999 !default;

$color__utility--light: #cecdd1 !default;

$color__utility--xlight: #f2f0f7 !default;

$color__primary--xdark: #0a375b !default;

$color__primary--dark: #0c4271 !default;

$color__primary: #00538a !default;

$color__primary--light: #1666b1 !default;

$color__primary--xlight: #1777b6 !default;

$color__accent--xdark: #2b673f !default;

$color__accent--dark: #317448 !default;

$color__accent: #2f854d !default;

$color__accent--light: #3b9b5c !default;

$color__accent--xlight: lighten($color__accent, 60%) !default;

$color__error--dark: #b55949 !default;

$color__error: #c8604d !default;

$color__error--light: #d76c59 !default;

$color__warn--dark: #cc9f45 !default;

$color__warn: #dea83b !default;

$color__warn--light: #e8b550 !default;

$color__highlight--dark: #ddd455 !default;

$color__highlight: #efe557 !default;

$color__highlight--light: #f6ef8b !default;

$palettes: (primary: (xlight: $color__primary--xlight, light: $color__primary--light, base: $color__primary, dark: $color__primary--dark, xdark: $color__primary--xdark), accent: (xlight: $color__accent--xlight, light: $color__accent--light, base: $color__accent, dark: $color__accent--dark, xdark: $color__accent--xdark), error: (light: $color__error--light, base: $color__error, dark: $color__error--dark), warn: (light: $color__error--light, base: $color__error, dark: $color__error--dark), highlight: (light: $color__highlight--light, base: $color__highlight, dark: $color__highlight--dark), pure: (dark: $color__pure--dark, base: $color__pure--light), utility: (xlight: $color__utility--xlight, light: $color__utility--light, base: $color__utility, dark: $color__utility--dark, xdark: $color__utility--xdark));

@function color($palette, $tone: "base") {
  @if not map-has-key($palettes, $palette) {
    $allowed: map-keys($palettes);

    @error "Invalid palette name: `#{$palette}`. Allowed palettes: #{$allowed}";
  }

  @if not map-has-key(map-get($palettes, $palette), $tone) {
    $allowed: map-keys(map-get($palettes, $palette));

    @error "Invalid palette tone: `#{$tone}`. Allowed tones for `#{$palette}` are: #{$allowed}";
  }

  @return map-get(map-get($palettes, $palette), $tone);
}

$theme-and-color: ("primary": $color__primary, "accent": $color__accent, "error": $color__error, "warn": $color__warn, "highlight": $color__highlight, "pure": $color__pure--light, "utility": $color__utility);

@mixin theme-color($property: "background-color") {
  @if not ($property == background-color) and not ($property == color) {
    @error "The `theme__color` mixin only accepts `background-color` or `color`";
  }

  @each $key, $value in $theme-and-color {
    ::ng-deep .u-theme--#{$key} & {
      &[disabled] {
        background-color: color(utility, light);
        color: color(utility);
      }

      #{$property}: $value;

      @if $property == "background-color" and (not ($key == "pure") and not ($key == "highlight")) {
        color: $color__pure--light;
      }

      @if $property == "background-color" and $key == "highlight" {
        color: $color__pure--dark;
      }
    }
  }
}

$ts-material-primary: (50: $color__primary--xlight, 100: $color__primary--light, 200: $color__primary, 300: $color__primary, 400: $color__primary, 500: $color__primary, 600: $color__primary, 700: $color__primary--dark, 800: $color__primary, 900: $color__primary--xdark, a100: $color__primary, a200: $color__primary, a400: $color__primary, a700: $color__primary, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-accent: (50: $color__accent--xlight, 100: $color__accent--light, 200: $color__accent, 300: $color__accent, 400: $color__accent, 500: $color__accent, 600: $color__accent, 700: $color__accent--dark, 800: $color__accent, 900: $color__accent--xdark, a100: $color__accent, a200: $color__accent, a400: $color__accent, a700: $color__accent, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-warn: (50: $color__error--light, 100: $color__error--light, 200: $color__error, 300: $color__error, 400: $color__error, 500: $color__error, 600: $color__error, 700: $color__error--dark, 800: $color__error, 900: $color__error--dark, a100: $color__error, a200: $color__error, a400: $color__error, a700: $color__error, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$g-cursors: alias, auto, col-resize, copy, default, help, move, not-allowed, ns-resize, pointer, text;

@function cursor($type: auto) {
  $index: index($g-cursors, $type);

  @if $index == null {
    @error 'Invalid cursor type name: `#{$type}`. Allowed types: "#{$g-cursors}"';
  }

  @return nth($g-cursors, $index);
}

@mixin cursor($type) {
  cursor: cursor($type);
}

$color__pure--dark: #302d35 !default;

$color__pure--light: #fafafa !default;

$color__utility--xdark: #3e3c43 !default;

$color__utility--dark: #757575 !default;

$color__utility: #999 !default;

$color__utility--light: #cecdd1 !default;

$color__utility--xlight: #f2f0f7 !default;

$color__primary--xdark: #0a375b !default;

$color__primary--dark: #0c4271 !default;

$color__primary: #00538a !default;

$color__primary--light: #1666b1 !default;

$color__primary--xlight: #1777b6 !default;

$color__accent--xdark: #2b673f !default;

$color__accent--dark: #317448 !default;

$color__accent: #2f854d !default;

$color__accent--light: #3b9b5c !default;

$color__accent--xlight: lighten($color__accent, 60%) !default;

$color__error--dark: #b55949 !default;

$color__error: #c8604d !default;

$color__error--light: #d76c59 !default;

$color__warn--dark: #cc9f45 !default;

$color__warn: #dea83b !default;

$color__warn--light: #e8b550 !default;

$color__highlight--dark: #ddd455 !default;

$color__highlight: #efe557 !default;

$color__highlight--light: #f6ef8b !default;

$palettes: (primary: (xlight: $color__primary--xlight, light: $color__primary--light, base: $color__primary, dark: $color__primary--dark, xdark: $color__primary--xdark), accent: (xlight: $color__accent--xlight, light: $color__accent--light, base: $color__accent, dark: $color__accent--dark, xdark: $color__accent--xdark), error: (light: $color__error--light, base: $color__error, dark: $color__error--dark), warn: (light: $color__error--light, base: $color__error, dark: $color__error--dark), highlight: (light: $color__highlight--light, base: $color__highlight, dark: $color__highlight--dark), pure: (dark: $color__pure--dark, base: $color__pure--light), utility: (xlight: $color__utility--xlight, light: $color__utility--light, base: $color__utility, dark: $color__utility--dark, xdark: $color__utility--xdark));

@function color($palette, $tone: "base") {
  @if not map-has-key($palettes, $palette) {
    $allowed: map-keys($palettes);

    @error "Invalid palette name: `#{$palette}`. Allowed palettes: #{$allowed}";
  }

  @if not map-has-key(map-get($palettes, $palette), $tone) {
    $allowed: map-keys(map-get($palettes, $palette));

    @error "Invalid palette tone: `#{$tone}`. Allowed tones for `#{$palette}` are: #{$allowed}";
  }

  @return map-get(map-get($palettes, $palette), $tone);
}

$theme-and-color: ("primary": $color__primary, "accent": $color__accent, "error": $color__error, "warn": $color__warn, "highlight": $color__highlight, "pure": $color__pure--light, "utility": $color__utility);

@mixin theme-color($property: "background-color") {
  @if not ($property == background-color) and not ($property == color) {
    @error "The `theme__color` mixin only accepts `background-color` or `color`";
  }

  @each $key, $value in $theme-and-color {
    ::ng-deep .u-theme--#{$key} & {
      &[disabled] {
        background-color: color(utility, light);
        color: color(utility);
      }

      #{$property}: $value;

      @if $property == "background-color" and (not ($key == "pure") and not ($key == "highlight")) {
        color: $color__pure--light;
      }

      @if $property == "background-color" and $key == "highlight" {
        color: $color__pure--dark;
      }
    }
  }
}

$ts-material-primary: (50: $color__primary--xlight, 100: $color__primary--light, 200: $color__primary, 300: $color__primary, 400: $color__primary, 500: $color__primary, 600: $color__primary, 700: $color__primary--dark, 800: $color__primary, 900: $color__primary--xdark, a100: $color__primary, a200: $color__primary, a400: $color__primary, a700: $color__primary, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-accent: (50: $color__accent--xlight, 100: $color__accent--light, 200: $color__accent, 300: $color__accent, 400: $color__accent, 500: $color__accent, 600: $color__accent, 700: $color__accent--dark, 800: $color__accent, 900: $color__accent--xdark, a100: $color__accent, a200: $color__accent, a400: $color__accent, a700: $color__accent, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-warn: (50: $color__error--light, 100: $color__error--light, 200: $color__error, 300: $color__error, 400: $color__error, 500: $color__error, 600: $color__error, 700: $color__error--dark, 800: $color__error, 900: $color__error--dark, a100: $color__error, a200: $color__error, a400: $color__error, a700: $color__error, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$g-cursors: alias, auto, col-resize, copy, default, help, move, not-allowed, ns-resize, pointer, text;

@function cursor($type: auto) {
  $index: index($g-cursors, $type);

  @if $index == null {
    @error 'Invalid cursor type name: `#{$type}`. Allowed types: "#{$g-cursors}"';
  }

  @return nth($g-cursors, $index);
}

@mixin cursor($type) {
  cursor: cursor($type);
}

$g-spacing: 16px !default;

$g-spacings: (small: (2: floor($g-spacing / 4), 1: floor($g-spacing / 2), 0: floor($g-spacing - 4)), default: (0: $g-spacing), large: (0: ceil($g-spacing / 2 * 3), 1: ceil($g-spacing / 2 * 4), 2: ceil($g-spacing / 2 * 5), 3: ceil($g-spacing / 2 * 6), 4: ceil($g-spacing / 2 * 7), 5: ceil($g-spacing / 2 * 9), 6: ceil($g-spacing / 2 * 12)));

@function spacing($type: default, $size: 0) {
  @if not map-has-key($g-spacings, $type) {
    $allowed-types: map-keys($g-spacings);

    @error "Invalid spacing type name: `#{$type}`. Allowed type: #{$allowed-types}";
  }

  @if not map-has-key(map-get($g-spacings, $type), $size) {
    $allowed-sizes: map-keys(map-get($g-spacings, $type));

    @error "Invalid size: `#{$size}`. Allowed sizes for `#{$type}` are: #{$allowed-sizes}";
  }

  @return map-get(map-get($g-spacings, $type), $size);
}

.cdk-drag {
  position: relative;

  &:not(.cdk-drag-placeholder) {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
  }

  .cdk-drag-handle {
    color: color(utility, light);
    cursor: cursor(ns-resize);
    position: absolute;
    right: spacing(small, 1);
  }

  &.cdk-drag-preview {
    --shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
    background-color: color(pure);
    box-shadow: var(--shadow);
    min-height: 50px;
    padding: 0 !important;

    .c-checkbox {
      margin-left: spacing(default);
    }
  }
}

.cdk-drag-placeholder {
  $primary: #{color(primary)};

  --drop-bg: #cce8d5;
  --drop-border: #7fd09c;
  background: var(--drop-bg);
  border: 2px dotted var(--drop-border);
  cursor: cursor(ns-resize);
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

@mixin input-placeholder {
  &::placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin input-placeholder {
  &::placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin center-content {
  align-items: center;
  display: flex;
  justify-content: center;
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: ("top": "bottom", "right": "left", "bottom": "top", "left": "right", "center": "center", "ltr": "rtl", "rtl": "ltr");

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    }
    @else {
      @error "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

@mixin pseudo($display: block, $position: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $position;
}

@mixin responsive-ratio($x, $y, $pseudo: true, $image: null) {
  $padding: unquote($y / $x * 100 + "%");

  @if $x == null or $y == null {
    @error "Both the x and y ratios must be passed in.";
  }

  @if $pseudo {
    &::before {
      @include pseudo($position: relative);

      padding-top: $padding;
      width: 100%;
    }
  }
  @else {
    padding-top: $padding;
  }

  @if image != null {
    background-image: url($image);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }
}

@mixin take-space($margin: 0) {
  bottom: $margin;
  left: $margin;
  position: absolute;
  right: $margin;
  top: $margin;
}

@mixin visually-hidden {
  $smallest-adjustment: 1px;

  border: 0;
  clip-path: rect(0, 0, 0, 0);
  display: block;
  height: $smallest-adjustment;
  margin: -$smallest-adjustment;
  overflow: hidden;
  padding: 0;
  pointer-events: none;
  position: absolute;
  visibility: hidden;
  width: $smallest-adjustment;
}

$type__family--base: #{Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif} !default;

$type__family--monospaced: #{"Lucida Console", Monaco, "DejaVu Sans Mono", monospace} !default;

$typography-typefaces: ("primary": $type__family--base, "monospaced": $type__family--monospaced);

$type__size--base: 16px !default;

$type__weight--base: 400 !default;

$typography-formats: "display", "headline", "title", "subhead", "body", "caption", "fixedwidth", "hint";

$typography-display-levels: 1, 2, 3, 4;

$typography-body-levels: 1, 2;

@mixin typography($format: "body", $level: 1, $typeface: "primary") {
  @if index($typography-formats, $format) == null {
    @error "Invalid typography format: `#{$format}`. Allowed formats: #{$typography-formats}";
  }

  @if not map-has-key($typography-typefaces, $typeface) {
    $allowed: map-keys($typography-typefaces);

    @error "Invalid typography typeface: `#{$typeface}`. Allowed typefaces: #{$allowed}";
  }
  @else {
    font-family: map-get($typography-typefaces, $typeface);
  }

  @if $format == "display" {
    @if index($typography-display-levels, $level) == null {
      @error "Invalid display format level: `#{$level}`. Allowed levels: #{$typography-display-levels}";
    }

    @if $level == 1 {
      font-size: 34px;
      font-weight: 500;
      line-height: 40px;
    }

    @if $level == 2 {
      font-size: 45px;
      font-weight: 500;
      line-height: 64px;
    }

    @if $level == 3 {
      font-size: 56px;
      font-weight: 500;
      letter-spacing: -.005em;
      line-height: 56px;
    }

    @if $level == 4 {
      font-size: 112px;
      font-weight: 400;
      letter-spacing: -.01em;
      line-height: 112px;
    }
  }

  @if $format == "headline" {
    font-size: 24px;
    font-weight: 500;
    line-height: 32px;
  }

  @if $format == "title" {
    font-size: 20px;
    font-weight: 500;
    letter-spacing: .005em;
  }

  @if $format == "subhead" {
    font-size: 18px;
    font-weight: 500;
    letter-spacing: .01em;
    line-height: 24px;
  }

  @if $format == "body" {
    font-size: 16px;
    letter-spacing: .01em;

    @if index($typography-body-levels, $level) == null {
      @error "Invalid body format level: `#{$level}`. Allowed levels: #{$typography-body-levels}";
    }

    @if $level == 1 {
      font-weight: 400;

      &:not(.c-button) {
        &:not(.c-input) {
          &:not(.c-select) {
            &:not(.ts-checkbox) {
              line-height: 20px;
            }
          }
        }
      }
    }

    @if $level == 2 {
      font-weight: 500;
    }
  }

  @if $format == "caption" {
    font-size: 12px;
    letter-spacing: .02em;
  }

  @if $format == "fixedwidth" {
    font-family: $type__family--monospaced;
  }

  @if $format == "hint" {
    color: color(utility);
    font-size: 75%;
    font-weight: 400;
    letter-spacing: .01em;
    line-height: 1.5;
  }
}

@mixin truncate-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

$g-spacing: 16px !default;

$g-spacings: (small: (2: floor($g-spacing / 4), 1: floor($g-spacing / 2), 0: floor($g-spacing - 4)), default: (0: $g-spacing), large: (0: ceil($g-spacing / 2 * 3), 1: ceil($g-spacing / 2 * 4), 2: ceil($g-spacing / 2 * 5), 3: ceil($g-spacing / 2 * 6), 4: ceil($g-spacing / 2 * 7), 5: ceil($g-spacing / 2 * 9), 6: ceil($g-spacing / 2 * 12)));

@function spacing($type: default, $size: 0) {
  @if not map-has-key($g-spacings, $type) {
    $allowed-types: map-keys($g-spacings);

    @error "Invalid spacing type name: `#{$type}`. Allowed type: #{$allowed-types}";
  }

  @if not map-has-key(map-get($g-spacings, $type), $size) {
    $allowed-sizes: map-keys(map-get($g-spacings, $type));

    @error "Invalid size: `#{$size}`. Allowed sizes for `#{$type}` are: #{$allowed-sizes}";
  }

  @return map-get(map-get($g-spacings, $type), $size);
}

@mixin menu-item-base {
  @include truncate-overflow;

  display: block;
  max-width: 100%;
  padding: 0 spacing(default);
  position: relative;
  text-align: left;
  text-decoration: none;
}

@mixin reset {
  * {
    &:not(.mat-form-field-label-wrapper) {
      box-sizing: border-box;
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  p {
    margin: unset;
  }
}

$color__pure--dark: #302d35 !default;

$color__pure--light: #fafafa !default;

$color__utility--xdark: #3e3c43 !default;

$color__utility--dark: #757575 !default;

$color__utility: #999 !default;

$color__utility--light: #cecdd1 !default;

$color__utility--xlight: #f2f0f7 !default;

$color__primary--xdark: #0a375b !default;

$color__primary--dark: #0c4271 !default;

$color__primary: #00538a !default;

$color__primary--light: #1666b1 !default;

$color__primary--xlight: #1777b6 !default;

$color__accent--xdark: #2b673f !default;

$color__accent--dark: #317448 !default;

$color__accent: #2f854d !default;

$color__accent--light: #3b9b5c !default;

$color__accent--xlight: lighten($color__accent, 60%) !default;

$color__error--dark: #b55949 !default;

$color__error: #c8604d !default;

$color__error--light: #d76c59 !default;

$color__warn--dark: #cc9f45 !default;

$color__warn: #dea83b !default;

$color__warn--light: #e8b550 !default;

$color__highlight--dark: #ddd455 !default;

$color__highlight: #efe557 !default;

$color__highlight--light: #f6ef8b !default;

$palettes: (primary: (xlight: $color__primary--xlight, light: $color__primary--light, base: $color__primary, dark: $color__primary--dark, xdark: $color__primary--xdark), accent: (xlight: $color__accent--xlight, light: $color__accent--light, base: $color__accent, dark: $color__accent--dark, xdark: $color__accent--xdark), error: (light: $color__error--light, base: $color__error, dark: $color__error--dark), warn: (light: $color__error--light, base: $color__error, dark: $color__error--dark), highlight: (light: $color__highlight--light, base: $color__highlight, dark: $color__highlight--dark), pure: (dark: $color__pure--dark, base: $color__pure--light), utility: (xlight: $color__utility--xlight, light: $color__utility--light, base: $color__utility, dark: $color__utility--dark, xdark: $color__utility--xdark));

@function color($palette, $tone: "base") {
  @if not map-has-key($palettes, $palette) {
    $allowed: map-keys($palettes);

    @error "Invalid palette name: `#{$palette}`. Allowed palettes: #{$allowed}";
  }

  @if not map-has-key(map-get($palettes, $palette), $tone) {
    $allowed: map-keys(map-get($palettes, $palette));

    @error "Invalid palette tone: `#{$tone}`. Allowed tones for `#{$palette}` are: #{$allowed}";
  }

  @return map-get(map-get($palettes, $palette), $tone);
}

$theme-and-color: ("primary": $color__primary, "accent": $color__accent, "error": $color__error, "warn": $color__warn, "highlight": $color__highlight, "pure": $color__pure--light, "utility": $color__utility);

@mixin theme-color($property: "background-color") {
  @if not ($property == background-color) and not ($property == color) {
    @error "The `theme__color` mixin only accepts `background-color` or `color`";
  }

  @each $key, $value in $theme-and-color {
    ::ng-deep .u-theme--#{$key} & {
      &[disabled] {
        background-color: color(utility, light);
        color: color(utility);
      }

      #{$property}: $value;

      @if $property == "background-color" and (not ($key == "pure") and not ($key == "highlight")) {
        color: $color__pure--light;
      }

      @if $property == "background-color" and $key == "highlight" {
        color: $color__pure--dark;
      }
    }
  }
}

$ts-material-primary: (50: $color__primary--xlight, 100: $color__primary--light, 200: $color__primary, 300: $color__primary, 400: $color__primary, 500: $color__primary, 600: $color__primary, 700: $color__primary--dark, 800: $color__primary, 900: $color__primary--xdark, a100: $color__primary, a200: $color__primary, a400: $color__primary, a700: $color__primary, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-accent: (50: $color__accent--xlight, 100: $color__accent--light, 200: $color__accent, 300: $color__accent, 400: $color__accent, 500: $color__accent, 600: $color__accent, 700: $color__accent--dark, 800: $color__accent, 900: $color__accent--xdark, a100: $color__accent, a200: $color__accent, a400: $color__accent, a700: $color__accent, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$ts-material-warn: (50: $color__error--light, 100: $color__error--light, 200: $color__error, 300: $color__error, 400: $color__error, 500: $color__error, 600: $color__error, 700: $color__error--dark, 800: $color__error, 900: $color__error--dark, a100: $color__error, a200: $color__error, a400: $color__error, a700: $color__error, contrast: (50: $color__pure--light, 100: $color__pure--light, 200: $color__pure--light, 300: $color__pure--light, 400: $color__pure--light, 500: $color__pure--light, 600: $color__pure--light, 700: $color__pure--light, 800: $color__pure--light, 900: $color__pure--light, a100: $color__pure--light, a200: $color__pure--light, a400: $color__pure--light, a700: $color__pure--light));

$defaultColor: #{color(pure)};

@mixin visible-scrollbars($color: $defaultColor) {
  $webkit-default-radius: 8px;
  $webkit-default-size: 11px;

  &::-webkit-scrollbar {
    -webkit-appearance: none;

    &:vertical {
      width: $webkit-default-size;
    }

    &:horizontal {
      height: $webkit-default-size;
    }
  }

  &::-webkit-scrollbar-thumb {
    $webkit-background-color: rgba(0, 0, 0, 0.5);

    background-color: $webkit-background-color;
    border: 2px solid $color;
    border-radius: $webkit-default-radius;
  }

  &::-webkit-scrollbar-track {
    background-color: $color;
    border-radius: $webkit-default-radius;
  }

  &::-webkit-scrollbar-corner {
    background-color: $color;
  }
}

@mixin hidden-scrollbars {
  &::-webkit-scrollbar {
    -webkit-appearance: none;

    &:vertical {
      width: 0;
    }

    &:horizontal {
      height: 0;
    }
  }

  &::-webkit-scrollbar-thumb {
    background-color: transparent;
    border-color: transparent;
  }

  &::-webkit-scrollbar-track {
    background-color: transparent;
    border-color: transparent;
  }

  &::-webkit-scrollbar-corner {
    background-color: transparent;
  }
}

$key-umbra: rgba(0, 0, 0, 0.2);
$key-penumbra: rgba(0, 0, 0, 0.14);
$ambient: rgba(0, 0, 0, 0.12);

$reference-shadows: (elevation: 0, shadows: ((0, 0, 0, 0, $key-umbra), (0, 0, 0, 0, $key-penumbra), (0, 0, 0, 0, $ambient))), (elevation: 2, shadows: ((0, 3, 1, -2, $key-umbra), (0, 2, 2, 0, $key-penumbra), (0, 1, 5, 0, $ambient))), (elevation: 3, shadows: ((0, 3, 3, -2, $key-umbra), (0, 3, 4, 0, $key-penumbra), (0, 1, 8, 0, $ambient))), (elevation: 4, shadows: ((0, 2, 4, -1, $key-umbra), (0, 4, 5, 0, $key-penumbra), (0, 1, 10, 0, $ambient))), (elevation: 6, shadows: ((0, 3, 5, -1, $key-umbra), (0, 6, 10, 0, $key-penumbra), (0, 1, 18, 0, $ambient))), (elevation: 8, shadows: ((0, 5, 5, -3, $key-umbra), (0, 8, 10, 1, $key-penumbra), (0, 3, 14, 2, $ambient))), (elevation: 16, shadows: ((0, 8, 10, -5, $key-umbra), (0, 16, 24, 2, $key-penumbra), (0, 6, 30, 5, $ambient)));

$min-animation-length: 250ms;
$max-animation-length: 400ms;

$material-elements: (dialog: 24, picker: 24, nav-drawer: 16, right-drawer: 16, bottom-sheet: 16, fab: 6 12 active, sub-menu-3: 11, sub-menu-2: 10, sub-menu-1: 9, menu: 8, bottom-nav-bar: 8, card: 2 8 hover, raised-button: 2 8 active, snackbar: 6, app-bar: 4, refresh-indicator: 3, quick-entry: 2 3 active, search-bar: 2 3 active, switch: 1);

@function find-bounding-shadow-sets($elevation) {
  @if $elevation < 0 {
    @error "find-bounding-shadow-sets: Elevation is less than zero";
  }

  $lower: nth($reference-shadows, length($reference-shadows) - 1);
  $upper: nth($reference-shadows, length($reference-shadows));

  @for $i from 1 to length($reference-shadows) {
    $inner-lower: nth($reference-shadows, $i);
    $inner-upper: nth($reference-shadows, $i + 1);

    @if map-get($inner-lower, "elevation") <= $elevation and map-get($inner-upper, "elevation") > $elevation {
      @return $inner-lower, $inner-upper;
    }
  }

  @return $lower, $upper;
}

@function lerp($x, $a, $b) {
  @return $a + $x * ($b - $a);
}

@function lerp-shadow($x, $shadow1, $shadow2) {
  $new-x: round(lerp($x, nth($shadow1, 1), nth($shadow2, 1)));
  $new-y: round(lerp($x, nth($shadow1, 2), nth($shadow2, 2)));
  $new-blur: round(lerp($x, nth($shadow1, 3), nth($shadow2, 3)));
  $new-spread: round(lerp($x, nth($shadow1, 4), nth($shadow2, 4)));
  $new-color: nth($shadow1, 5);

  @return #{$new-x + px} #{$new-y + px} #{$new-blur + px} #{$new-spread + px} $new-color;
}

@function calculate-shadow-set-at-depth($elevation) {
  $bounds: find-bounding-shadow-sets($elevation);
  $min: nth($bounds, 1);
  $max: nth($bounds, 2);
  $x: ($elevation - map-get($min, "elevation")) / (map-get($max, "elevation") - map-get($min, "elevation"));
  $elevation-shadows: ();

  @for $i from 1 to length(map-get($min, "shadows")) + 1 {
    $new-shadow: lerp-shadow($x, nth(map-get($min, "shadows"), $i), nth(map-get($max, "shadows"), $i));
    $elevation-shadows: append($elevation-shadows, $new-shadow, comma);
  }

  @return $elevation-shadows;
}

@mixin elevation-transition($elevation-change: 6, $easing: cubic-bezier(0.4, 0, 0.2, 1)) {
  $duration: lerp($elevation-change / 24, $min-animation-length, $max-animation-length);

  transition: box-shadow $duration $easing;
}

@mixin elevation($elevation1, $elevation2: null, $state: null) {
  @if $elevation1 == 0 {
    box-shadow: none !important;
  }
  @else {
    box-shadow: calculate-shadow-set-at-depth($elevation1);
  }

  @if $elevation2 != null {
    @include elevation-transition($elevation2 - $elevation2);

    &:#{$state} {
      @if $elevation1 == 0 {
        box-shadow: none !important;
      }
      @else {
        box-shadow: calculate-shadow-set-at-depth($elevation2);
      }
    }
  }
}

@mixin elevation-element($element-name) {
  $attr: map-get($material-elements, $element-name);

  @if length($attr) == 1 {
    @include elevation(nth($attr, 1));
  }
  @else {
    @include elevation(nth($attr, 1), nth($attr, 2), nth($attr, 3));
  }
}

$g-spacing: 16px !default;

$g-spacings: (small: (2: floor($g-spacing / 4), 1: floor($g-spacing / 2), 0: floor($g-spacing - 4)), default: (0: $g-spacing), large: (0: ceil($g-spacing / 2 * 3), 1: ceil($g-spacing / 2 * 4), 2: ceil($g-spacing / 2 * 5), 3: ceil($g-spacing / 2 * 6), 4: ceil($g-spacing / 2 * 7), 5: ceil($g-spacing / 2 * 9), 6: ceil($g-spacing / 2 * 12)));

@function spacing($type: default, $size: 0) {
  @if not map-has-key($g-spacings, $type) {
    $allowed-types: map-keys($g-spacings);

    @error "Invalid spacing type name: `#{$type}`. Allowed type: #{$allowed-types}";
  }

  @if not map-has-key(map-get($g-spacings, $type), $size) {
    $allowed-sizes: map-keys(map-get($g-spacings, $type));

    @error "Invalid size: `#{$size}`. Allowed sizes for `#{$type}` are: #{$allowed-sizes}";
  }

  @return map-get(map-get($g-spacings, $type), $size);
}

@mixin center-content {
  align-items: center;
  display: flex;
  justify-content: center;
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: ("top": "bottom", "right": "left", "bottom": "top", "left": "right", "center": "center", "ltr": "rtl", "rtl": "ltr");

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    }
    @else {
      @error "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

@mixin pseudo($display: block, $position: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $position;
}

@mixin responsive-ratio($x, $y, $pseudo: true, $image: null) {
  $padding: unquote($y / $x * 100 + "%");

  @if $x == null or $y == null {
    @error "Both the x and y ratios must be passed in.";
  }

  @if $pseudo {
    &::before {
      @include pseudo($position: relative);

      padding-top: $padding;
      width: 100%;
    }
  }
  @else {
    padding-top: $padding;
  }

  @if image != null {
    background-image: url($image);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }
}

@mixin take-space($margin: 0) {
  bottom: $margin;
  left: $margin;
  position: absolute;
  right: $margin;
  top: $margin;
}

@mixin visually-hidden {
  $smallest-adjustment: 1px;

  border: 0;
  clip-path: rect(0, 0, 0, 0);
  display: block;
  height: $smallest-adjustment;
  margin: -$smallest-adjustment;
  overflow: hidden;
  padding: 0;
  pointer-events: none;
  position: absolute;
  visibility: hidden;
  width: $smallest-adjustment;
}

$z-layers: "global-overlay", "global-header", "drawer", "tooltip", "attached-panel-overlay", "panel-header", "menu-trigger";

@function z($name) {
  @if index($z-layers, $name) {
    @return length($z-layers) - index($z-layers, $name) + 500;
  }
  @else {
    @error 'There is no item "#{$name}" in this list; choose one of: #{$z-layers}';

    @return null;
  }
}

@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  $perpendicular-borders: $size solid transparent;

  content: '';
  height: 0;
  position: absolute;
  width: 0;
  z-index: z(tooltip);

  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  }
  @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }

  @if $direction == top {
    bottom: 100%;
  }

  @if $direction == bottom {
    top: 100%;
  }

  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;
}

$type__family--base: #{Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif} !default;

$type__family--monospaced: #{"Lucida Console", Monaco, "DejaVu Sans Mono", monospace} !default;

$typography-typefaces: ("primary": $type__family--base, "monospaced": $type__family--monospaced);

$type__size--base: 16px !default;

$type__weight--base: 400 !default;

$typography-formats: "display", "headline", "title", "subhead", "body", "caption", "fixedwidth", "hint";

$typography-display-levels: 1, 2, 3, 4;

$typography-body-levels: 1, 2;

@mixin typography($format: "body", $level: 1, $typeface: "primary") {
  @if index($typography-formats, $format) == null {
    @error "Invalid typography format: `#{$format}`. Allowed formats: #{$typography-formats}";
  }

  @if not map-has-key($typography-typefaces, $typeface) {
    $allowed: map-keys($typography-typefaces);

    @error "Invalid typography typeface: `#{$typeface}`. Allowed typefaces: #{$allowed}";
  }
  @else {
    font-family: map-get($typography-typefaces, $typeface);
  }

  @if $format == "display" {
    @if index($typography-display-levels, $level) == null {
      @error "Invalid display format level: `#{$level}`. Allowed levels: #{$typography-display-levels}";
    }

    @if $level == 1 {
      font-size: 34px;
      font-weight: 500;
      line-height: 40px;
    }

    @if $level == 2 {
      font-size: 45px;
      font-weight: 500;
      line-height: 64px;
    }

    @if $level == 3 {
      font-size: 56px;
      font-weight: 500;
      letter-spacing: -.005em;
      line-height: 56px;
    }

    @if $level == 4 {
      font-size: 112px;
      font-weight: 400;
      letter-spacing: -.01em;
      line-height: 112px;
    }
  }

  @if $format == "headline" {
    font-size: 24px;
    font-weight: 500;
    line-height: 32px;
  }

  @if $format == "title" {
    font-size: 20px;
    font-weight: 500;
    letter-spacing: .005em;
  }

  @if $format == "subhead" {
    font-size: 18px;
    font-weight: 500;
    letter-spacing: .01em;
    line-height: 24px;
  }

  @if $format == "body" {
    font-size: 16px;
    letter-spacing: .01em;

    @if index($typography-body-levels, $level) == null {
      @error "Invalid body format level: `#{$level}`. Allowed levels: #{$typography-body-levels}";
    }

    @if $level == 1 {
      font-weight: 400;

      &:not(.c-button) {
        &:not(.c-input) {
          &:not(.c-select) {
            &:not(.ts-checkbox) {
              line-height: 20px;
            }
          }
        }
      }
    }

    @if $level == 2 {
      font-weight: 500;
    }
  }

  @if $format == "caption" {
    font-size: 12px;
    letter-spacing: .02em;
  }

  @if $format == "fixedwidth" {
    font-family: $type__family--monospaced;
  }

  @if $format == "hint" {
    color: color(utility);
    font-size: 75%;
    font-weight: 400;
    letter-spacing: .01em;
    line-height: 1.5;
  }
}

@mixin truncate-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin center-content {
  align-items: center;
  display: flex;
  justify-content: center;
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: ("top": "bottom", "right": "left", "bottom": "top", "left": "right", "center": "center", "ltr": "rtl", "rtl": "ltr");

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    }
    @else {
      @error "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

@mixin pseudo($display: block, $position: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $position;
}

@mixin responsive-ratio($x, $y, $pseudo: true, $image: null) {
  $padding: unquote($y / $x * 100 + "%");

  @if $x == null or $y == null {
    @error "Both the x and y ratios must be passed in.";
  }

  @if $pseudo {
    &::before {
      @include pseudo($position: relative);

      padding-top: $padding;
      width: 100%;
    }
  }
  @else {
    padding-top: $padding;
  }

  @if image != null {
    background-image: url($image);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }
}

@mixin take-space($margin: 0) {
  bottom: $margin;
  left: $margin;
  position: absolute;
  right: $margin;
  top: $margin;
}

@mixin visually-hidden {
  $smallest-adjustment: 1px;

  border: 0;
  clip-path: rect(0, 0, 0, 0);
  display: block;
  height: $smallest-adjustment;
  margin: -$smallest-adjustment;
  overflow: hidden;
  padding: 0;
  pointer-events: none;
  position: absolute;
  visibility: hidden;
  width: $smallest-adjustment;
}

.u-visually-hidden {
  @include visually-hidden;
}

$z-layers: "global-overlay", "global-header", "drawer", "tooltip", "attached-panel-overlay", "panel-header", "menu-trigger";

@function z($name) {
  @if index($z-layers, $name) {
    @return length($z-layers) - index($z-layers, $name) + 500;
  }
  @else {
    @error 'There is no item "#{$name}" in this list; choose one of: #{$z-layers}';

    @return null;
  }
}
