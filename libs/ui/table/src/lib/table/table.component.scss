@import '~@terminus/ui-styles/helpers';

.ts-table {
  --ts-table-bg: var(--ts-color-base-white);
  --ts-table-fontSize: 14px;
  --ts-table-header-bg: var(--ts-color-utility-300);
  --ts-table-header-text-color: var(--ts-color-utility-700);
  --ts-table-border-color: var(--ts-color-utility-300);
  --ts-table-header-border-color: var(--ts-color-utility-500);
  --ts-table-header-fontSize: 13px;
  --ts-table-zindex-base-context: 2;
  --ts-table-zindex-resize-background: calc(var(--ts-table-zindex-base-context) + 1);
  --ts-table-zindex-resize-grabber: calc(var(--ts-table-zindex-resize-background) + 1);
  --ts-table-cell-padding: var(--ts-space-inset-400) var(--ts-space-inset-500);
  // Must be greater than 40 as that is the length of the generated z-indexes for header cells
  --ts-table-sticky-end-z: 50;
  --ts-table-grip-vertical-adjustment: 50%;
  --ts-table-header-row-fontWeight: 500;
  --ts-table-grabber-icon-font-size: 14px;
  --ts-table-header-borderRadius: var(--ts-border-radius-base);
  border-collapse: separate;
  border-spacing: unset;
  font: var(--ts-typography-compound-body);
  max-height: 100%;
  table-layout: fixed;
  width: 100%;

  &.ts-table--compact {
    --ts-table-cell-padding: var(--ts-space-inset-200);
    --ts-table-grip-vertical-adjustment: calc(50% - 4px);
  }

  // Class added to all sticky-end cells
  .ts-table__column--sticky-end {
    // For the last sticky cell of a row, hide the overflow so that the resize grabber doesn't create extra space past the final cell.
    &:last-of-type {
      &.ts-header-cell {
        overflow: hidden;

        // Move the resizer back into view since we aren't overlapping a following cell
        .ts-header-cell__resizer {
          transform: translateX(40%);
        }
      }
    }
  }

  // Header row
  .ts-header-row {
    // NOTE: Adding the background here ensures that no white area is seen during manual column resize.
    background-color: var(--ts-table-header-bg);
    border-radius: var(--ts-table-header-borderRadius) var(--ts-table-header-borderRadius) 0 0;
    color: var(--ts-table-header-text-color);
    font: var(--ts-typography-compound-caption);
    font-size: var(--ts-table-header-fontSize);
    font-weight: var(--ts-table-header-row-fontWeight);
    transition: background-color var(--ts-animation-time-duration-200) var(--ts-animation-easing-easeOut);

    // NOTE: This is required for the tr background color to be visible.
    &::after {
      content: '';
      display: block;
    }
  }

  // Body row
  .ts-row {
    border-bottom: 1px solid var(--ts-table-border-color);

    // Workaround for https://goo.gl/pFmjJD in IE 11. Adds a pseudo
    // element that will stretch the row the correct height. See:
    // https://connect.microsoft.com/IE/feedback/details/802625
    &::after {
      content: '';
      display: inline-block;
      min-height: inherit;
    }
  }

  // Any cell
  .ts-header-cell,
  .ts-cell,
  .ts-footer-cell {
    min-height: inherit;
    position: relative;
    text-align: left;
    word-wrap: break-word;

    &.ts-table__column--sticky-end {
      border-left: 2px solid var(--ts-table-header-border-color);
    }

    &.ts-table__column--sticky {
      &:not(.ts-table__column--sticky-end) {
        border-right: 2px solid var(--ts-table-header-border-color);
      }
    }

    // Class added if a column should not wrap
    &.ts-column-no-wrap {
      white-space: nowrap;
    }

    &--align-right {
      text-align: right;

      .ts-sort-header-container {
        justify-content: flex-end;
      }
    }

    &--align-left {
      text-align: left;
    }

    &--align-center {
      text-align: center;
    }
  }

  .ts-cell {
    border-bottom: 1px solid var(--ts-color-utility-300);
  }

  // Body cell
  .ts-cell,
  .ts-footer-cell {
    background-color: var(--ts-table-bg);
    font-size: var(--ts-table-fontSize);
    overflow: hidden;
    padding: var(--ts-table-cell-padding);
    text-overflow: ellipsis;
    transition: background-color var(--ts-animation-time-duration-200) var(--ts-animation-easing-easeOut);
    white-space: nowrap;

    &.ts-table__column--sticky {
      background-color: var(--ts-table-bg);
    }
  }

  // Header cell
  .ts-header-cell {
    background-color: var(--ts-table-header-bg);
    border-color: var(--ts-table-header-border-color);
    color: var(--ts-color-utility-600);
    font-weight: 500;
    padding: var(--ts-table-cell-padding);

    // Class added when the column is sorted
    &.ts-sort-header-sorted {
      color: var(--ts-color-utility-700);
      .ts-sort-header-arrow {
        color: var(--ts-color-utility-700);
      }
    }

    &:first-of-type {
      border-radius: var(--ts-table-header-borderRadius) 0 0 0;
    }

    &:last-of-type {
      border-radius: 0 var(--ts-table-header-borderRadius) 0 0;
    }

    &:not(:last-of-type) {
      position: relative;

      &::after {
        background-color: var(--ts-table-header-border-color);
        bottom: 0;
        content: '';
        display: block;
        left: calc(100% - 1px);
        opacity: 0;
        position: absolute;
        top: 0;
        transition: opacity var(--ts-animation-time-duration-200) var(--ts-animation-easing-easeOut);
        width: 1px;
        z-index: var(--ts-table-zindex-base-context);
      }

      &:focus,
      &:hover {
        &::after {
          opacity: 1;
        }
      }
    }

    // Icon for unsorted state
    .ts-sort-header-container__icon {
      color: var(--ts-color-utility-600);
    }

    // Reverse the natural z-index order so that all borders on the right created with box-shadow are visible above the following cell.
    // Supports up to 40 columns
    $possible-columns: 40;
    @for $i from 1 through $possible-columns {
      &:nth-child(#{$i}) {
        $z: #{$possible-columns - $i};
        // NOTE: important needed to overwrite inline styles
        // stylelint-disable-next-line declaration-no-important
        z-index: $z !important;
      }
    }

    // Raise sticky-end cells above others
    &.ts-table__column--sticky-end {
      // NOTE: important needed to overwrite inline styles
      // stylelint-disable-next-line declaration-no-important
      z-index: var(--ts-table-sticky-end-z) !important;
    }

    // Class added when the user hovers the resize column hit area
    &.ts-cell--resizing {
      .ts-header-cell__resizer {
        opacity: 1;

        &::before {
          width: 7px;
        }
      }
    }

    // <span> 'Grabber' hit area to resize a column
    &__resizer {
      bottom: -1px;
      cursor: col-resize;
      display: block;
      opacity: 0;
      position: absolute;
      right: 0;
      top: -1px;
      transform: translateX(50%);
      transition: opacity var(--ts-animation-time-duration-200) var(--ts-animation-easing-easeOut);
      width: spacing(large);
      z-index: calc(var(--ts-table-zindex-resize-background));

      // Visible container for grabber
      &::before {
        background-color: var(--ts-color-primary-500);
        bottom: 1px;
        content: '';
        display: block;
        left: 50%;
        position: absolute;
        top: 0;
        transform: translateX(-50%);
        transition: width 100ms ease-out;
        width: 1px;
      }

      // Dots inside grabber
      &::after {
        color: var(--ts-color-utility-100);
        content: '\2026';
        display: block;
        font-size: var(--ts-table-grabber-icon-font-size);
        height: 11px;
        left: 50%;
        position: absolute;
        top: 30%;
        transform: rotate(90deg) translate(var(--ts-table-grip-vertical-adjustment), -3px);
        z-index: var(--ts-table-zindex-resize-grabber);
      }
    }
  }
}
