name: "Release CI"
on:
  push:
    branches:
      - "release"
      - "v[0-9]+.[0-9]+.[0-9]+"
env:
  GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
  FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
  NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"
  NODE_AUTH_TOKEN: "${{ secrets.NPM_TOKEN }}"

# Note: 'affected' packages are determined by files changes since the last tag
# 1) test affected packages
# 2) lint affected packages
# 3) build & release affected packages
jobs:
  #
  # Cancel any workflows that would be duplicated by this run
  #
  cancel_duplicate_runs:
    name: "Cancel Duplicate Runs"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ secrets.GH_TOKEN }}

  #
  # Test affected projects
  #
  affected_test:
    name: "Test affected projects"
    runs-on: ubuntu-latest
    needs: [cancel_duplicate_runs]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --tags --prune --depth=100 origin release
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache deps"
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Set NX affected base"
        run: tools/ci/set-nx-base.sh
        if: env.SHOULD_RUN == 'true'
      - name: "List affected LIBS"
        run: yarn run affected:libs --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "List affected APPS"
        run: yarn run affected:apps --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Test affected projects"
        run: yarn nx affected --target=test --codeCoverage --base=${{ env.NX_BASE }} --head=origin/release
        if: env.SHOULD_RUN == 'true'
      - name: "Archive code coverage results"
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage/*
        if: env.SHOULD_RUN == 'true'

  #
  # Lint affected projects
  #
  affected_lint:
    name: "Lint affected projects"
    runs-on: ubuntu-latest
    needs: [cancel_duplicate_runs]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --tags --prune --depth=100 origin release
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache deps"
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Set NX affected base"
        run: tools/ci/set-nx-base.sh
        if: env.SHOULD_RUN == 'true'
      - name: "Lint files"
        run: yarn nx affected --target=lint --base=${{ env.NX_BASE }} --head=origin/release
        if: env.SHOULD_RUN == 'true'

  #
  # Build affected projects
  #
  affected_build:
    name: "Compile & release affected projects"
    runs-on: ubuntu-latest
    needs: [affected_test, affected_lint]
    env:
      working-directory: ./t-oss
      demos-directory: ./ui-demos-release
      docs-publish-directory: ./t-oss/docs
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ./t-oss
      - run: git fetch --tags --prune --depth=100 origin release
        working-directory: ${{ env.working-directory }}
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
        working-directory: ${{ env.working-directory }}
      - name: "Checkout ui-demos-release repo"
        uses: actions/checkout@v2
        with:
          repository: GetTerminus/ui-demos-release
          token: ${{ secrets.GH_TOKEN }}
          path: ./ui-demos-release
        if: env.SHOULD_RUN == 'true'
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
        if: env.SHOULD_RUN == 'true'
# NOTE: Commented out due to issue with NX. I can verify NX is installed, but we get an 'NX not found' message.
# This only happens in the release action - not the PR action. And only happens in this last step.
#      - name: "Cache deps"
#        id: cache_deps
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-deps
#        with:
#          path: |
#            **/node_modules
#          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-${{ env.cache-name }}-
#            ${{ runner.os }}-yarn-
#            ${{ runner.os }}-
#        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
        working-directory: ${{ env.working-directory }}
      - name: "Set NX affected base"
        run: tools/ci/set-nx-base.sh
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "List affected LIBS"
        run: yarn run affected:libs --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "List affected APPS"
        run: yarn run affected:apps --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Build styles before all packages"
        run: yarn nx build ui-styles --prod --skip-nx-cache
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
#      - name: "TEMP: Build ALL projects"
#        run: yarn run build:all --skip-nx-cache
#        working-directory: ${{ env.working-directory }}
#        if: env.SHOULD_RUN == 'true'
      - name: "Build affected projects"
        run: yarn run affected --target=build --withDeps --prod --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: Build affected projects schematics
        run: yarn affected:build-schematics --base=${{ env.NX_BASE }} --head=origin/release
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Update credentials"
        run: |
          git config credential.helper 'cache --timeout=120'
          git config user.email "devops@terminus.com"
          git config user.name "terminus-devops"
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Bump version for affected projects"
        run: yarn run version-bump
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      # NOTE: Building again here is needed since Lerna bumps the versions in the source files.
      - name: "Build bumped projects"
        run: tools/ci/lerna-build-changed-projects.sh
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      # TODO: This should not be needed
      - name: "Build all projects"
        run: yarn run build:all
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Build all projects schematics"
        run: yarn run build:all:schematics
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Commit changes"
        run: tools/ci/commit-after-lerna.sh
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Deploy affected libs"
        run: yarn run publish:libs
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Deploy affected apps"
        run: yarn run affected --target=deploy --base=${{ env.NX_BASE }} --head=origin/release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Tag latest release as successful"
        run: tools/ci/update-release-tag.sh
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - name: "Generate & Upload documentation"
        run: yarn run docs:ci
        working-directory: ${{ env.working-directory }}
        if: env.SHOULD_RUN == 'true'
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --cache-control "max-age=86400" --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: ${{ env.docs-publish-directory }}
          DEST_DIR: ${{ github.repository.master_branch }}
        if: env.SHOULD_RUN == 'true'

  #
  # Upload coverage reports
  #
  upload_code_coverage:
    name: "Upload code coverage"
    needs: [affected_test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --tags --prune --depth=100 origin release
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache deps"
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Download code coverage results"
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-report
          path: coverage
        if: env.SHOULD_RUN == 'true'
      - name: Upload coverage results to CodeCov
        run: tools/ci/coverage-upload.sh
        if: env.SHOULD_RUN == 'true'
