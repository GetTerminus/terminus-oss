name: "Release CI"
on:
  push:
    branches:
      - 'master'
      - 'v[0-9]+.[0-9]+.[0-9]+'

# 1) build library
# 2) test library
# 3) lint all files
# 4) build demos
# 5) publish library
# 6) generate docs
# 7) deploy docs
# 8) deploy demos
jobs:
  #
  # Test affected projects
  #
  affected_test:
    name: Test affected projects
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --tags --prune --depth=50 origin master
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache NODE
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - if: steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: Get sha of last tag
        id: get-sha
        run: |
          latesttag=$(git describe --abbrev=0)
          echo "Latest tag: \"${latesttag}\""
          latestsha=$(git show-ref -s ${latesttag})
          echo "Latest sha: \"${latestsha}\""
          echo "::set-output name=latestsha::$latestsha"
      - name: Test affected projects
        run: yarn nx affected --target=test --codeCoverage --base=${{ steps.get-sha.outputs.latestsha }}
      - name: Upload coverage results to CodeCov
        run: tools/ci/coverage-upload.sh
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage/*

  #
  # Lint affected projects
  #
  affected_lint:
    name: Lint affected projects
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --tags --prune --depth=50 origin master
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache NODE
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - if: steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: Get sha of last tag
        id: get-sha
        run: |
          latesttag=$(git describe --abbrev=0)
          echo "Latest tag: \"${latesttag}\""
          latestsha=$(git show-ref -s ${latesttag})
          echo "Latest sha: \"${latestsha}\""
          echo "::set-output name=latestsha::$latestsha"
      - name: Lint files
        run: yarn nx affected --target=lint --base=${{ steps.get-sha.outputs.latestsha }}

  #
  # Build affected projects
  #
  affected_build:
    name: Compile affected projects
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: |
          git fetch --tags --prune --depth=50 origin master
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache NODE
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - if: steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: Get sha of last tag
        id: get-sha
        run: |
          latesttag=$(git describe --abbrev=0)
          echo "Latest tag: \"${latesttag}\""
          latestsha=$(git show-ref -s ${latesttag})
          echo "Latest sha: \"${latestsha}\""
          echo "::set-output name=latestsha::$latestsha"
      - name: List affected LIBS
        run: yarn affected:libs --base=${{ steps.get-sha.outputs.latestsha }}
      - name: List affected APPS
        run: yarn affected:apps --base=${{ steps.get-sha.outputs.latestsha }}
      - name: Build affected projects
        run: yarn nx affected --target=build --prod --base=${{ steps.get-sha.outputs.latestsha }}
      - name: Install semantic-release globallly
        run: yarn global add semantic-release
      - name: Deploy affected projects
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn nx affected --target=deploy --base=${{ steps.get-sha.outputs.latestsha }}
      - name: Upload built files
        uses: actions/upload-artifact@v2
        with:
          name: built-projects
          path: dist/*
