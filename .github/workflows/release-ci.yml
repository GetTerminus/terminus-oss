name: "Release CI"
on:
  push:
    branches:
      - 'master'
      - 'v[0-9]+.[0-9]+.[0-9]+'

# Note: 'affected' packages are determined by files changes since the last tag
# 1) test affected packages
# 2) lint affected packages
# 3) build & release affected packages
jobs:
  #
  # Cancel any workflows that would be duplicated by this run
  #
  cleanup-runs:
    name: "Cancel Duplicates"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --no-tags --prune --depth=5 origin master
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"

  #
  # Test affected projects
  #
  affected_test:
    name: "Test affected projects"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --tags --prune --depth=50 origin master
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache NODE"
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Test affected projects"
        run: yarn nx affected --target=test --codeCoverage
        if: env.SHOULD_RUN == 'true'
      - name: "Upload coverage results to CodeCov"
        run: tools/ci/coverage-upload.sh
        if: env.SHOULD_RUN == 'true'
      - name: "Archive code coverage results"
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage/*
        if: env.SHOULD_RUN == 'true'

  #
  # Lint affected projects
  #
  affected_lint:
    name: "Lint affected projects"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --tags --prune --depth=50 origin master
      - name: "Set SHOULD_RUN flag"
        run: tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache NODE"
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Lint files"
        run: yarn nx affected --target=lint
        if: env.SHOULD_RUN == 'true'

  #
  # Build affected projects
  #
  affected_build:
    name: "Compile & release affected projects"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: /home/runner/work/terminus-oss/terminus-oss/t-oss
      - run: |
          cd t-oss
          git fetch --tags --prune --depth=50 origin master
          cd ../
      - name: "Set SHOULD_RUN flag"
        run: t-oss/tools/ci/set-should-run-flag.sh "${{github.event.head_commit.message}}"
      - name: "Checkout ui-demos-release repo"
        uses: actions/checkout@v2
        with:
          repository: GetTerminus/ui-demos-release
          token: ${{ secrets.GH_TOKEN }}
          path: /home/runner/work/terminus-oss/terminus-oss/ui-demos-release
        if: env.SHOULD_RUN == 'true'
      - name: "Enter OSS directory"
        run: |
          cd t-oss/
          pwd
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
        if: env.SHOULD_RUN == 'true'
      - name: "Cache NODE"
        id: cache_node
        uses: actions/cache@v2
        env:
          cache-name: cache-node
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_node.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "List affected LIBS"
        run: yarn --cwd t-oss/ affected:libs
        if: env.SHOULD_RUN == 'true'
      - name: "List affected APPS"
        run: yarn affected:apps
        if: env.SHOULD_RUN == 'true'
      - name: "Build styles before all packages"
        run: yarn nx build ui-styles --prod --skip-nx-cache
        if: env.SHOULD_RUN == 'true'
      - name: "Build affected projects"
        run: yarn nx affected --target=build --withDeps --prod
        if: env.SHOULD_RUN == 'true'
      - name: "Update credentials"
        run: |
          git config credential.helper 'cache --timeout=120'
          git config user.email "devops@terminus.com"
          git config user.name "terminus-devops"
        if: env.SHOULD_RUN == 'true'
      - name: "Bump version for affected projects"
        run: yarn run version-bump
        if: env.SHOULD_RUN == 'true'
      - name: "Build bumped projects"
        run: tools/ci/lerna-build-changed-projects.sh
        if: env.SHOULD_RUN == 'true'
      - name: "TEMP Build all projects"
        run: yarn run build:all
        if: env.SHOULD_RUN == 'true'
      - name: "Commit changes"
        run: tools/ci/commit-after-lerna.sh
        if: env.SHOULD_RUN == 'true'
      - name: "Deploy affected projects"
        run: yarn run publish:libs
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: env.SHOULD_RUN == 'true'
      - name: "Generate & Upload documentation"
        run: yarn run docs:ci
        if: env.SHOULD_RUN == 'true'
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --cache-control "max-age=86400" --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: './docs'
          DEST_DIR: ${{ github.ref }}
        if: env.SHOULD_RUN == 'true'
