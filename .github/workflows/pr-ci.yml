name: "PR CI"
on: pull_request_target
env:
  GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
  FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
  CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

jobs:
  #
  # Cancel any workflows that would be duplicated by this run
  #
  cancel_duplicate_runs:
    name: "Cancel Duplicates"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --no-tags --prune --depth=5 origin release
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/release'"

  list_test_lint_build:
    name: "List - Test - Lint - Build"
    needs: [cancel_duplicate_runs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --no-tags --prune --depth=50 origin release
      - name: "Check last commit message"
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: "Set SHOULD_RUN flag"
        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
      - name: "Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: "Cache deps"
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          # NOTE: Increment the 4 digit number to cache-bust
          key: ${{ runner.os }}-yarn-0001-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-0001-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-0001-
          # TEMPORARY: Commenting out the fallback cache as there is some sub-dependency that is breaking our linting.
          #  ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive

      #
      # List affected
      #
      - name: List affected LIBS
        run: yarn affected:libs --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'

      #
      # Test affected
      #
      - name: "Test affected projects"
        run: yarn nx affected:test --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }} --codeCoverage
        if: env.SHOULD_RUN == 'true'
      - name: "Regression test on affected projects"
        run: tools/ci/run-chromatic-with-changed-projects.sh ${GITHUB_REF#refs/*/}
        env:
          CHROMATIC_BRANCH: ${{ github.event.pull_request.head.ref }}
          CHROMATIC_SHA: ${{ github.event.pull_request.head.sha }}
        if: env.SHOULD_RUN == 'true'

      #
      # Lint affected
      #
      - name: "Lint files"
        run: yarn nx affected:lint --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'

      #
      # Build affected
      #
      - name: Build styles before all packages
        run: yarn nx build ui-styles --prod --skip-nx-cache
        if: env.SHOULD_RUN == 'true'
      - name: Build affected projects
        run: yarn nx affected:build --prod --withDeps --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'
      - name: Build affected projects schematics
        run: yarn affected:build-schematics --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'

      #
      # Upload coverage reports
      #
      - name: Upload coverage results to CodeCov
        run: tools/ci/coverage-upload.sh
        if: env.SHOULD_RUN == 'true'
