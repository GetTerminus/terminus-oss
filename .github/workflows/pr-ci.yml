name: "PR CI"
on: pull_request
env:
  GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
  FONTAWESOME_NPM_AUTH_TOKEN: "${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
  CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}


jobs:
  #
  # Cancel any workflows that would be duplicated by this run
  #
  cancel_duplicate_runs:
    name: "Cancel Duplicates"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --no-tags --prune --depth=5 origin release
      - uses: rokroskar/workflow-run-cleanup-action@master
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/release'"

  #
  # Test affected projects
  #
  affected_test:
    name: "Test affected projects"
    needs: [cancel_duplicate_runs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --no-tags --prune --depth=5 origin release
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set SHOULD_RUN flag
        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
      - name: "Test new SKIP ENV method"
        run: |
          if [[ "${{github.event.head_commit.message}}" =~ (skip\ ci|ci\ skip) ]]; then
            echo "$('false' > SHOULD_RUN)"
          else
            echo "$('true' > SHOULD_RUN)"
          fi
      - name: "Test RESULT"
        run: |
          echo $(cat SHOULD_RUN)
          FOO=$(cat SHOULD_RUN) == "true"
          echo "$FOO"
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: Cache deps
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: Test affected projects
        run: yarn nx affected:test --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }} --codeCoverage
        if: env.SHOULD_RUN == 'true'
      - name: "Archive code coverage results"
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-pr
          path: coverage/*
        if: env.SHOULD_RUN == 'true'
#      - name: Regression test on affected projects
#        run: yarn affected:chromatic
#        if: env.SHOULD_RUN == 'true'

  #
  # Lint affected projects
  #
  affected_lint:
    name: "Lint affected projects"
    runs-on: ubuntu-latest
    needs: [cancel_duplicate_runs]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --no-tags --prune --depth=5 origin release
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set SHOULD_RUN flag
        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: Cache deps
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: Lint files
        run: yarn nx affected:lint --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'

# TODO: re-enable these before final release
#  #
#  # Run integration test
#  #
#  integration_test:
#    name: "Integration test affected projects"
#    needs: affected_build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v2
#      - name: Check last commit message
#        id: skip
#        uses: atlwendy/retrieve-commit-messages-from-pr@v2
#      - name: Set SHOULD_RUN flag
#        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
#      - name: Set up Node
#        uses: actions/setup-node@v1
#        with:
#          node-version: 12.x
#        if: env.SHOULD_RUN == 'true'
#      - name: Cache deps
#        id: cache_deps
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-deps
#        with:
#          path: |
#            **/node_modules
#          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-${{ env.cache-name }}-
#            ${{ runner.os }}-yarn-
#            ${{ runner.os }}-
#        if: env.SHOULD_RUN == 'true'
#      - if: env.SHOULD_RUN == 'true' && steps.cache_deps_modules.outputs.cache-hit != 'true'
#        run: yarn install --frozen-lockfile --non-interactive
#      - if: env.SHOULD_RUN == 'true'
#        run: yarn add start-server-and-test
#      - name: Download built library
#        uses: actions/download-artifact@v2
#        with:
#          name: built-projects
#          path: dist/*
#        if: env.SHOULD_RUN == 'true'
#      - name: Run integration test
#        run: yarn libraries:test:integration
#        if: env.SHOULD_RUN == 'true'
#
#  #
#  # Run regression test
#  #
#  regression_test:
#    name: "Visual regression test affected projects"
#    needs: affected_build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v2
#      - name: Get pusher name
#        run: echo ::set-env name=author::${{ github.event.pull_request.user.login }}
#      - name: Check last commit message
#        id: skip
#        uses: atlwendy/retrieve-commit-messages-from-pr@master
#      - name: Set SHOULD_RUN flag
#        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
#        if: "! contains(env.author, 'renovate')"
#      - name: Set up Node
#        uses: actions/setup-node@v1
#        with:
#          node-version: 12.x
#        if: env.SHOULD_RUN == 'true'
#      - if: env.SHOULD_RUN == 'true'
#        run: yarn add start-server-and-test
#      - name: Cache deps
#        id: cache_deps
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-deps
#        with:
#          path: |
#            **/node_modules
#          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-${{ env.cache-name }}-
#            ${{ runner.os }}-yarn-
#            ${{ runner.os }}-
#        if: env.SHOULD_RUN == 'true'
#      - if: env.SHOULD_RUN == 'true' && steps.cache_deps_modules.outputs.cache-hit != 'true'
#        run: yarn install --frozen-lockfile --non-interactive
#      - name: Download built library
#        uses: actions/download-artifact@v2
#        with:
#          name: built-projects
#          path: dist/*
#        if: env.SHOULD_RUN == 'true'
#      - name: Run regression test
#        uses: percy/exec-action@v0.3.0
#        with:
#          custom-command: yarn run vr:test:regression
#        env:
#          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
#        if: env.SHOULD_RUN == 'true'

  #
  # Build affected projects
  #
  affected_build:
    name: "Compile affected projects"
    runs-on: ubuntu-latest
    needs: [affected_test, affected_lint]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: |
          git fetch --no-tags --prune --depth=5 origin release
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set SHOULD_RUN flag
        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: Cache deps
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: List affected LIBS
        run: yarn affected:libs --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'
      - name: List affected APPS
        run: yarn affected:apps --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'
      - name: Build styles before all packages
        run: yarn nx build ui-styles --prod --skip-nx-cache
        if: env.SHOULD_RUN == 'true'
      - name: Build affected projects
        run: yarn nx affected:build --prod --withDeps --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'
      - name: Build affected projects schematics
        run: yarn affected:build-schematics --base=remotes/origin/release --head=${{ github.event.pull_request.head.ref }}
        if: env.SHOULD_RUN == 'true'
      - name: Upload built files
        uses: actions/upload-artifact@v2
        with:
          name: built-projects
          path: dist/*
        if: env.SHOULD_RUN == 'true'

  #
  # Upload coverage reports
  #
  upload_code_coverage:
    name: "Upload code coverage"
    needs: [affected_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - run: git fetch --no-tags --prune --depth=5 origin release
      - name: Check last commit message
        id: skip
        uses: atlwendy/retrieve-commit-messages-from-pr@v2
      - name: Set SHOULD_RUN flag
        run: echo ::set-env name=SHOULD_RUN::${{ steps.skip.outputs.shouldRun }}
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
        if: env.SHOULD_RUN == 'true'
      - name: Cache deps
        id: cache_deps
        uses: actions/cache@v2
        env:
          cache-name: cache-deps
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
        if: env.SHOULD_RUN == 'true'
      - if: env.SHOULD_RUN == 'true' && steps.cache_deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive
      - name: "Download code coverage results"
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-report-pr
          path: coverage
        if: env.SHOULD_RUN == 'true'
      - name: Upload coverage results to CodeCov
        run: tools/ci/coverage-upload.sh
        if: env.SHOULD_RUN == 'true'
